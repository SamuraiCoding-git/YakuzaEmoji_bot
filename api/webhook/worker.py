import asyncio
import logging
from aiogram import Bot
from aiogram.enums import StickerFormat

from api.queue.redis_queue import StickerRedisQueue
from api.services.pack_generator import PackGenerator
from api.config import load_config
from api.webhook.utils.dependencies import get_repo_instance

# --- –ö–æ–Ω—Ñ–∏–≥ ---
WORKER_TOKENS = [
    "7899743037:AAHwdDAY9GNk7m_A8hbHcqaEr5-sZ5jXHqg",
    "7172000332:AAHV8KZPBl5k85qrV5clx15nQcrT9wG-338",
    "7776721117:AAEct-XrfRDgfJnjYKWpbN1ilcV0rkQVQuM",
    "7878723913:AAFju3trW7oux7noxMXshqWN2KjrTeSWVgE",
    "7848210284:AAG5Rl2npWVYZ5KH2LppClgm3tly7bZyAGA"
]


logging.basicConfig(level=logging.INFO)
queue = StickerRedisQueue()
config = load_config(".env")  # –¢–≤–æ–π –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è PackGenerator

async def process_task(bot: Bot, pack_generator: PackGenerator, task: dict):
    user_id = task["user_id"]
    file_id = task["file_id"]
    width = task["width"]
    height = task["height"]
    media_type = task.get("media_type", "photo")
    referral_bot_name = task.get("referral_bot_name")
    repo = get_repo_instance()
    try:
        logging.info(f"‚ñ∂Ô∏è [{bot.token[:10]}...] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–µ—Ç–∞: {task}")

        link, duration = await pack_generator.generate_pack(
            user_id,
            file_id,
            width,
            height,
            StickerFormat.STATIC if media_type == "photo" else StickerFormat.VIDEO,
            referral_bot_name
        )

        await repo.stickers.create_sticker(
            user_id,
            link,
            file_id,
            StickerFormat.STATIC if media_type == "photo" else StickerFormat.VIDEO,
            width,
            height,
            {"duration": duration}
        )

        try:
            await bot.send_message(user_id, f"‚úÖ –í–∞—à —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –≥–æ—Ç–æ–≤: {link}")
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        logging.info(f"‚úÖ –£—Å–ø–µ—Ö! –°—Ç–∏–∫–µ—Ä–ø–∞–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {user_id}, —Å—Å—ã–ª–∫–∞: {link}")

    except Exception as e:
        import traceback
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {traceback.format_exc()}")

async def worker_loop(bot_token: str):
    bot = Bot(token=bot_token)
    pack_generator = PackGenerator(bot=bot, config=config)
    logging.info(f"üöÄ –í–æ—Ä–∫–µ—Ä —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª [{bot_token[:10]}...]")
    while True:
        task = queue.pop()
        if task:
            await process_task(bot, pack_generator, task)
        else:
            await asyncio.sleep(2)  # –û–∂–∏–¥–∞–Ω–∏–µ –µ—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç

async def main():
    tasks = [worker_loop(token) for token in WORKER_TOKENS]
    await asyncio.gather(*tasks)

if __name__ == "__main__":
    asyncio.run(main())