from pydantic import BaseModel, Field
from typing import Literal, Optional, List, Dict

from pydantic.v1 import root_validator, HttpUrl


class GeneratePackRequest(BaseModel):
    media_type: Literal["photo", "video", "document"]
    file_id: str
    width: Optional[int] = Field(default=100, ge=100, le=1200)
    height: Optional[int] = Field(default=100, ge=100, le=10000)
    user_id: int
    referral_bot_name: Optional[str] = None
    # priority: int = Field(default=5, ge=0, le=9, description="0 - –Ω–∞–∏–≤—ã—Å—à–∏–π, 9 - –Ω–∏–∑—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")


class BotRequest(BaseModel):
    token: str
    owner_id: int
    # main_bot_url: HttpUrl
    owner_channel_url: str = None
    welcome_payload: Optional[dict] = None

    @root_validator(pre=True)
    def set_default_welcome_payload(cls, values):
        if not values.get("welcome_payload") and values.get("main_bot_url"):
            values["welcome_payload"] = {
                "text": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–¥–µ—Å—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ.",
                "buttons": [
                    {
                        "text": "üöÄ –ü–µ—Ä–µ–π—Ç–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç",
                        "url": str(values["main_bot_url"])
                    },
                    {
                        "text": "üöÄ –ü–µ—Ä–µ–π—Ç–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç",
                        "url": "https://t.me/MatveyDoroshenko"
                    }
                ]
            }
        return values

class BotQueryRequest(BaseModel):
    current_user_id: int
    owner_id: Optional[int] = None
    is_active: Optional[bool] = None

class ProductRequest(BaseModel):
    product_name: str = Field(..., max_length=255)
    product_type: str = Field(..., max_length=50)
    price: int = Field(..., ge=0)
    duration: Optional[int] = Field(None, ge=0, description="–î–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ ‚Äî –≤ –¥–Ω—è—Ö")
    access_level: int = Field(..., ge=0)
    category_id: int = Field(..., description="ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

class ProductCategoryRequest(BaseModel):
    category_name: str = Field(..., max_length=255)

class DiscountLinkRequest(BaseModel):
    product_id: int
    discount_id: int

class ReferralCreateRequest(BaseModel):
    referrer_id: int
    referee_id: int
    product_id: Optional[int] = None
    bonus_days_granted: int = 0

class PromoCampaignCreateRequest(BaseModel):
    title: str
    message_text: str
    media: Optional[str] = None
    keyboard: Optional[List[List[dict]]] = None
    token: str

    # –§–∏–ª—å—Ç—Ä—ã
    min_access_level: Optional[int] = None
    access_levels: Optional[List[int]] = None
    no_subscription: Optional[bool] = False
    interacted_with_promo_id: Optional[int] = None
    clicked_but_not_purchased: Optional[bool] = False
    limit: Optional[int] = None

    @root_validator
    def validate_conflicts(cls, values):
        min_access_level = values.get("min_access_level")
        access_levels = values.get("access_levels")
        no_subscription = values.get("no_subscription")
        clicked = values.get("clicked_but_not_purchased")
        interacted = values.get("interacted_with_promo_id")

        if no_subscription and (min_access_level or access_levels):
            raise ValueError("–ù–µ–ª—å–∑—è —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—é –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–æ access level.")

        if clicked and not interacted:
            raise ValueError("–ü–æ–ª–µ 'clicked_but_not_purchased' —Ç—Ä–µ–±—É–µ—Ç 'interacted_with_promo_id'.")

        if access_levels and not all(isinstance(x, int) for x in access_levels):
            raise ValueError("–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ 'access_levels' –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")

        return values

class PromoLogClickRequest(BaseModel):
    promo_id: int
    user_id: int

class PromoLogPurchaseRequest(BaseModel):
    promo_id: int
    user_id: int
    payment_id: int

class ReferralTransactionCreateRequest(BaseModel):
    referral_user_id: int = Field(..., description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –¥—Ä—É–≥–∞")
    referred_user_id: int = Field(..., description="ID –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    product_id: int = Field(..., description="ID –ø—Ä–æ–¥—É–∫—Ç–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—ã–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∞")
    amount: int = Field(..., description="–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏")
    bonus: int = Field(..., description="–ë–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏ –∏–ª–∏ –∏–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞")
    transaction_type: str = Field(..., description="–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'purchase', 'upgrade')")

class UserCreateRequest(BaseModel):
    user_id: int
    full_name: str
    username: Optional[str] = None
    is_premium: bool
    referred_by: Optional[int] = None


class GateBotWelcomeUpdateRequest(BaseModel):
    welcome_payload: Dict
