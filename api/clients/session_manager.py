import asyncio
import logging
from typing import List
from pathlib import Path

from api.clients.telethon_client import TelethonClientWrapper

logger = logging.getLogger("SessionManager")


class SessionManager:
    def __init__(self, session_files: List[str], api_id: int, api_hash: str):
        self.api_id = api_id
        self.api_hash = api_hash
        self._clients: List[TelethonClientWrapper] = []
        self._lock = asyncio.Lock()

        for f in session_files:
            p = Path(f)
            if p.exists() and p.suffix == ".session":
                client = TelethonClientWrapper(str(p), api_id, api_hash)
                client.in_use = False
                self._clients.append(client)
            else:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π .session —Ñ–∞–π–ª: {f}")

        if not self._clients:
            raise RuntimeError("‚ùå –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ .session —Ñ–∞–π–ª–∞")

    async def start_all(self):
        await asyncio.gather(*(c.start() for c in self._clients))
        premium_count = sum(1 for c in self._clients if c.is_premium)
        logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {len(self._clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤ ({premium_count} –ø—Ä–µ–º–∏—É–º)")

    async def disconnect_all(self):
        await asyncio.gather(*(c.disconnect() for c in self._clients))
        logger.info("‚ùé –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")

    async def get_client(self) -> TelethonClientWrapper:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π –∫–ª–∏–µ–Ω—Ç (–ª—é–±–æ–π, –≤ —Ç–æ–º —á–∏—Å–ª–µ non-premium)
        """
        return await self._get_client_internal(premium_only=False)

    async def get_premium_client(self) -> TelethonClientWrapper:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º-–∫–ª–∏–µ–Ω—Ç–∞
        """
        return await self._get_client_internal(premium_only=True)

    async def _get_client_internal(self, premium_only: bool) -> TelethonClientWrapper:
        async with self._lock:
            for client in self._clients:
                if client.in_use:
                    continue
                if premium_only and not client.is_premium:
                    continue
                try:
                    if not await client.is_connected():
                        await client.start()
                    client.in_use = True
                    logger.info(f"üì≤ –í—ã–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç {client.session_file.name} (premium={client.is_premium})")
                    return client
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç {client.session_file.name}: {e}")
                    continue
            raise RuntimeError("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤" + (" (—Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º)" if premium_only else ""))

    async def release_client(self, client: TelethonClientWrapper):
        client.in_use = False