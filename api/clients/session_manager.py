import asyncio
import logging
import random
from typing import List
from pathlib import Path

from api.clients.telethon_client import TelethonClientWrapper

logger = logging.getLogger("SessionManager")


class SessionManager:
    def __init__(self, session_files: List[str], api_id: int, api_hash: str):
        self.api_id = api_id
        self.api_hash = api_hash
        self._clients: List[TelethonClientWrapper] = []
        self._lock = asyncio.Lock()

        for f in session_files:
            p = Path(f)
            if p.exists() and p.suffix == ".session":
                client = TelethonClientWrapper(str(p), api_id, api_hash)
                client.in_use = False  # –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self._clients.append(client)
            else:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π .session —Ñ–∞–π–ª: {f}")

        if not self._clients:
            raise RuntimeError("‚ùå –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ .session —Ñ–∞–π–ª–∞")

    async def start_all(self):
        await asyncio.gather(*(c.start() for c in self._clients))
        logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {len(self._clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤")

    async def disconnect_all(self):
        await asyncio.gather(*(c.disconnect() for c in self._clients))
        logger.info("‚ùé –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")

    async def get_client(self) -> TelethonClientWrapper:
        async with self._lock:
            for client in self._clients:
                if not client.in_use:
                    try:
                        if not await client.is_connected():
                            await client.start()
                        client.in_use = True
                        return client
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç {client.session_file.name}: {e}")
                        continue
            raise RuntimeError("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")

    async def get_premium_client(self) -> TelethonClientWrapper:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ premium-–∫–ª–∏–µ–Ω—Ç–∞ (—É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –∏ —Å is_premium=True)"""
        async with self._lock:
            logger.info("[SessionManager] üîç –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ premium-–∫–ª–∏–µ–Ω—Ç–∞...")

            for client in self._clients:
                logger.debug(
                    f"[SessionManager] –ö–ª–∏–µ–Ω—Ç {client.session_file.name}: "
                    f"is_premium={client.is_premium}"
                )

            premium_candidates = [
                client for client in self._clients
                if not client.in_use and client.is_premium is True
            ]

            logger.info(f"[SessionManager] üîé –ù–∞–π–¥–µ–Ω–æ {len(premium_candidates)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö premium-–∫–ª–∏–µ–Ω—Ç–æ–≤")

            if not premium_candidates:
                raise RuntimeError("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö premium –∫–ª–∏–µ–Ω—Ç–æ–≤")

            chosen = random.choice(premium_candidates)
            chosen.in_use = True

            logger.info(
                f"[SessionManager] ‚úÖ –í—ã–±—Ä–∞–Ω premium-–∫–ª–∏–µ–Ω—Ç: {chosen.session_file.name}"
            )
            return chosen

    async def release_client(self, client: TelethonClientWrapper):
        """–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)"""
        client.in_use = False
