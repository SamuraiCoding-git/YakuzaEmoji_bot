from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from .callback_data_factory import SizeOptions
from ..misc.size_options import generate_size_options


def generate_size_options_keyboard(width: int, height: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç InlineKeyboardBuilder —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞.

    :return: InlineKeyboardBuilder —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ)

    Args:
        height:
        width:
    """

    options = generate_size_options(width, height)

    builder = InlineKeyboardBuilder()

    for option in options:
        width = option["width"]
        height = option["height"]
        text = f"{int(width / 100)}√ó{int(height / 100)} üó°Ô∏è"
        callback_data = SizeOptions(width=width, height=height).pack()
        builder.button(text=text, callback_data=callback_data)
    builder.adjust(1)

    return builder.as_markup()




def sub_keyboard(channel_username: str) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª ü•∑üèª",
                url=f"https://t.me/{channel_username}"
            )
        ],
        [
            InlineKeyboardButton(
                text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üâê",
                callback_data="check_sub"
            )
        ]
    ])
    return keyboard

def main_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ü—Ä–æ—Ñ–∏–ª—å üë§",
                callback_data="profile"
            )
        ]
    ])
    return keyboard

# def admin_main_keyboard():
#     builder = InlineKeyboardBuilder()
#     builder.button(text="üõçÔ∏è –ü—Ä–æ–¥—É–∫—Ç—ã", callback_data="admin_products")
#     builder.button(text="üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="admin_categories")
#     builder.button(text="ü§ñ –ë–æ—Ç—ã", callback_data="admin_bots")
#     builder.button(text="üéüÔ∏è –°–∫–∏–¥–∫–∏", callback_data="admin_discounts")
#     builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
#     builder.adjust(2)
#     return builder.as_markup()
#
# def back_keyboard():
#     return InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
#     ])
#
# def products_list_keyboard(products):
#     builder = InlineKeyboardBuilder()
#     for prod in products:
#         builder.button(
#             text=f"{prod['product_name']} ({prod['price']}‚ÇΩ)",
#             callback_data=f"product_{prod['id']}"
#         )
#     builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="add_product")
#     builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
#     builder.adjust(1)
#     return builder.as_markup()
#
# def product_detail_keyboard(product_id):
#     builder = InlineKeyboardBuilder()
#     builder.button(text="üí≤ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"edit_price_{product_id}")
#     builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_products")
#     builder.adjust(1)
#     return builder.as_markup()
#
# def categories_list_keyboard(categories):
#     builder = InlineKeyboardBuilder()
#     for cat in categories:
#         builder.button(
#             text=cat["category_name"],
#             callback_data=f"category_{cat['id']}"
#         )
#     builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")
#     builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
#     builder.adjust(1)
#     return builder.as_markup()
#
# def audience_main_keyboard():
#     builder = InlineKeyboardBuilder()
#     builder.button(text="‚úÖ –ü–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É —É—Ä–æ–≤–Ω—é", callback_data="set_min_access_level")
#     builder.button(text="‚úÖ –ü–æ —Å–ø–∏—Å–∫—É —É—Ä–æ–≤–Ω–µ–π", callback_data="set_access_levels")
#     builder.button(text="üì≠ –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="set_no_subscription")
#     builder.button(text="üí° –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –∫–∞–º–ø–∞–Ω–∏–µ–π", callback_data="set_interacted")
#     builder.button(text="üõí –ö–ª–∏–∫–∞–ª, –Ω–æ –Ω–µ –∫—É–ø–∏–ª", callback_data="set_clicked_not_purchased")
#     builder.button(text="üî¢ –õ–∏–º–∏—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="set_limit")
#     builder.button(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="audience_confirm")
#     builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="audience_cancel")
#     builder.adjust(2, 2, 2)
#     return builder.as_markup()
#
# def access_levels_keyboard(
#     levels: list[int],  # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, [1, 6, 12, 99])
#     multi: bool = False,
#     selected: set[int] = None,
# ) -> InlineKeyboardBuilder:
#     selected = selected or set()
#     builder = InlineKeyboardBuilder()
#     for level in sorted(levels):
#         mark = "‚úÖ " if level in selected else ""
#         cb = f"toggle_access_{level}" if multi else f"choose_access_{level}"
#         builder.button(text=f"{mark}–£—Ä–æ–≤–µ–Ω—å {level}", callback_data=cb)
#     if multi:
#         builder.button(text="–ì–æ—Ç–æ–≤–æ", callback_data="access_levels_done")
#     builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="audience_back")
#     builder.adjust(1)
#     return builder.as_markup()

def payment_method_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ USDT (TRC20)", callback_data="pay_usdt_trc20")],
        [InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–∞ / –°–ë–ü", callback_data="pay_card")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")]
    ])

def admin_approve_keyboard(user_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂", callback_data=f"approve_payment_{user_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_payment_{user_id}")]
    ])

def cancel_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")]
    ])
