from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from ..filters.admin import AdminFilter
from ..services.api import APIClient

from ..misc.states import AdminStates

admin_router = Router()
admin_router.message.filter(AdminFilter())
api = APIClient("http://localhost:8000/admin")

# ========== –ì–ª–∞–≤–Ω–∞—è ==========
@admin_router.message(Command("admin"))
async def admin_start(message: Message, state: FSMContext):
    await state.set_state(AdminStates.main)
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!",
        reply_markup=admin_main_keyboard()
    )

@admin_router.callback_query(F.data == "admin_back")
async def admin_back_handler(call: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.main)
    await call.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏",
        reply_markup=admin_main_keyboard()
    )

# ========== –ü—Ä–æ–¥—É–∫—Ç—ã ==========

@admin_router.callback_query(F.data == "admin_products")
async def admin_products_handler(call: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.products)
    products = await api.get("/products") or []
    await call.message.edit_text(
        "üõçÔ∏è –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:",
        reply_markup=products_list_keyboard(products)
    )

# [–≠–Ω–¥–ø–æ–∏–Ω—Ç] /admin/products (POST) ‚Äî —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç
@admin_router.callback_query(F.data == "add_product")
async def add_product_handler(call: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_product_name)
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", reply_markup=back_keyboard())

@admin_router.message(AdminStates.waiting_product_name)
async def waiting_product_price(message: Message, state: FSMContext):
    await state.update_data(product_name=message.text)
    await state.set_state(AdminStates.waiting_product_price)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö:", reply_markup=back_keyboard())

@admin_router.message(AdminStates.waiting_product_price)
async def save_new_product(message: Message, state: FSMContext):
    try:
        price = int(message.text)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")
        return
    data = await state.get_data()
    payload = {
        "product_name": data["product_name"],
        "product_type": "subscription",  # –ø–æ –¥–µ—Ñ–æ–ª—Ç—É, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —á–µ—Ä–µ–∑ FSM
        "price": price,
        "duration": 30,
        "access_level": 1,
        "category_id": 1  # —Ç–æ–∂–µ –º–æ–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å
    }
    product = await api.post("/products", json=payload)
    await state.set_state(AdminStates.products)
    await message.answer(
        f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç {product['product_name']} ({product['price']}‚ÇΩ) –¥–æ–±–∞–≤–ª–µ–Ω!",
        reply_markup=admin_main_keyboard()
    )

# [–≠–Ω–¥–ø–æ–∏–Ω—Ç] /admin/products (GET) ‚Äî –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã (–∫–Ω–æ–ø–∫–∞ "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
@admin_router.callback_query(F.data.startswith("product_"))
async def show_product_details(call: CallbackQuery, state: FSMContext):
    product_id = int(call.data.replace("product_", ""))
    product = await api.get(f"/products/{product_id}")
    if not product:
        await call.message.edit_text("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=back_keyboard())
        return
    await call.message.edit_text(
        f"<b>{product['product_name']}</b>\n"
        f"–¶–µ–Ω–∞: {product['price']}‚ÇΩ\n"
        f"–¢–∏–ø: {product['product_type']}\n"
        f"–î–Ω–µ–π: {product['duration']}\n"
        f"–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: {product['access_level']}",
        reply_markup=product_detail_keyboard(product['id'])
    )

# [–≠–Ω–¥–ø–æ–∏–Ω—Ç] /admin/products/{product_id}/price (PATCH) ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É
@admin_router.callback_query(F.data.startswith("edit_price_"))
async def edit_product_price_start(call: CallbackQuery, state: FSMContext):
    product_id = int(call.data.replace("edit_price_", ""))
    await state.update_data(product_id=product_id)
    await state.set_state(AdminStates.waiting_product_price)
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞:", reply_markup=back_keyboard())

@admin_router.message(AdminStates.waiting_product_price)
async def update_product_price(message: Message, state: FSMContext):
    try:
        price = int(message.text)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")
        return
    data = await state.get_data()
    product_id = data.get("product_id")
    product = await api.patch(f"/products/{product_id}/price", params={"new_price": price})
    await state.set_state(AdminStates.products)
    await message.answer(
        f"‚úÖ –¶–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {product['product_name']} ({product['price']}‚ÇΩ)",
        reply_markup=admin_main_keyboard()
    )

# [–≠–Ω–¥–ø–æ–∏–Ω—Ç] /admin/products/{product_id} (GET) ‚Äî –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID
# (—Å–º. show_product_details –≤—ã—à–µ)

# [–≠–Ω–¥–ø–æ–∏–Ω—Ç] /admin/products/by-category/{category_id} (GET) ‚Äî –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ –∂–µ–ª–∞–Ω–∏—é —á–µ—Ä–µ–∑ FSM –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

# ========== –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ==========

@admin_router.callback_query(F.data == "admin_categories")
async def admin_categories_handler(call: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.categories)
    categories = await api.get("/categories") or []
    await call.message.edit_text(
        "üìÅ –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:",
        reply_markup=categories_list_keyboard(categories)
    )

# [–≠–Ω–¥–ø–æ–∏–Ω—Ç] /admin/categories (POST) ‚Äî —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@admin_router.callback_query(F.data == "add_category")
async def add_category_handler(call: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_category_name)
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=back_keyboard())

@admin_router.message(AdminStates.waiting_category_name)
async def save_new_category(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!")
        return
    payload = {"category_name": name}
    category = await api.post("/categories", json=payload)
    await state.set_state(AdminStates.categories)
    await message.answer(
        f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{category['category_name']}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
        reply_markup=admin_main_keyboard()
    )

# [–≠–Ω–¥–ø–æ–∏–Ω—Ç] /admin/categories (GET) ‚Äî –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# (—Å–º. admin_categories_handler –≤—ã—à–µ)

# [–≠–Ω–¥–ø–æ–∏–Ω—Ç] /admin/categories/{category_id} (GET) ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID
@admin_router.callback_query(F.data.startswith("category_"))
async def show_category_details(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.replace("category_", ""))
    category = await api.get(f"/categories/{category_id}")
    await call.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category['category_name']}</b>",
        reply_markup=back_keyboard()
    )

# ========== –ë–æ—Ç—ã ==========

@admin_router.callback_query(F.data == "admin_bots")
async def admin_bots_handler(call: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.bots)
    # [–≠–Ω–¥–ø–æ–∏–Ω—Ç] /admin/bots/filter (POST)
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞: –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤, —Å–æ–∑–¥–∞—Ç—å/—É–¥–∞–ª–∏—Ç—å/–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —Ç.–¥.
    await call.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏ (—Å–æ–∑–¥–∞—Ç—å/—É–¥–∞–ª–∏—Ç—å/–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–≤–∫–ª—é—á–∏—Ç—å)",
        reply_markup=back_keyboard()
    )

# ========== –°–∫–∏–¥–∫–∏ ==========

@admin_router.callback_query(F.data == "admin_discounts")
async def admin_discounts_handler(call: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.discounts)
    await call.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏ (–Ω–∞–∑–Ω–∞—á–∏—Ç—å, –¥–æ–±–∞–≤–∏—Ç—å)",
        reply_markup=back_keyboard()
    )

# ========== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ==========

@admin_router.callback_query(F.data == "admin_stats")
async def admin_stats_handler(call: CallbackQuery, state: FSMContext):
    products = await api.get("/products") or []
    top = sorted(products, key=lambda p: p["price"], reverse=True)[:3]
    txt = "\n".join([f"#{i+1}. {p['product_name']} ({p['price']}‚ÇΩ)" for i, p in enumerate(top)])
    await state.set_state(AdminStates.stats)
    await call.message.edit_text(f"üìä TOP –ø—Ä–æ–¥—É–∫—Ç—ã:\n{txt}", reply_markup=back_keyboard())

# =======================
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# =======================

def admin_main_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üõçÔ∏è –ü—Ä–æ–¥—É–∫—Ç—ã", callback_data="admin_products")
    builder.button(text="üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="admin_categories")
    builder.button(text="ü§ñ –ë–æ—Ç—ã", callback_data="admin_bots")
    builder.button(text="üéüÔ∏è –°–∫–∏–¥–∫–∏", callback_data="admin_discounts")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
    builder.adjust(2)
    return builder.as_markup()

def back_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])

def products_list_keyboard(products):
    builder = InlineKeyboardBuilder()
    for prod in products:
        builder.button(
            text=f"{prod['product_name']} ({prod['price']}‚ÇΩ)",
            callback_data=f"product_{prod['id']}"
        )
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="add_product")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
    builder.adjust(1)
    return builder.as_markup()

def product_detail_keyboard(product_id):
    builder = InlineKeyboardBuilder()
    builder.button(text="üí≤ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"edit_price_{product_id}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_products")
    builder.adjust(1)
    return builder.as_markup()

def categories_list_keyboard(categories):
    builder = InlineKeyboardBuilder()
    for cat in categories:
        builder.button(
            text=cat["category_name"],
            callback_data=f"category_{cat['id']}"
        )
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
    builder.adjust(1)
    return builder.as_markup()