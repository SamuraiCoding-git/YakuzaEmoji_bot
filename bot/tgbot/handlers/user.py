import re
import traceback

import httpx
from aiogram import Router, F
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.markdown import hbold, hitalic

from ..config import Config
from ..keyboards.callback_data_factory import SizeOptions
from ..keyboards.inline import generate_size_options_keyboard, admin_approve_keyboard, cancel_keyboard, \
    payment_method_keyboard
from ..misc.states import ForwardState, PaymentStates
from ..services.api import APIClient

user_router = Router()
client = APIClient(base_url="http://localhost:8000")
MAX_FILE_SIZE = 15 * 1024 * 1024

USDT_TRC20 = "TFE3yHwMYPoCEdsNegFKUpkEJYvEqb4ScB"
CARD = "2200150934247153"
SBP = "+79857490785"

# @user_router.message(F.photo)
# async def photo(message: Message):
#     await message.reply(message.photo[-1].file_id)


@user_router.message(Command("forward"))
async def start_forward(message: Message, state: FSMContext):
    await state.set_state(ForwardState.waiting_messages)
    parts = message.text.strip().split(maxsplit=3)
    if len(parts) < 4 or not parts[1].isdigit():
        return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /forward {user_id} {pattern} {short_name}")

    user_id = int(parts[1])
    short_name = parts[2]
    pattern_raw = parts[3]
    lines = pattern_raw.strip().split()
    if not lines:
        return await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —ç–º–æ–¥–∑–∏")

    await state.update_data(
        user_id=user_id,
        short_name=short_name,
        pattern=lines,
        messages={"left": None, "center": None, "right": None}
    )
    await message.answer(f"‚úÖ –ì–æ—Ç–æ–≤–æ. –ñ–¥—É 3 —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–µ—Ç–∫–æ–π –¥–ª—è {user_id}")

@user_router.message(ForwardState.waiting_messages)
async def handle_candidate_message(message: Message, state: FSMContext):
    data = await state.get_data()
    content = (message.text or "").strip()

    align = None
    if "–ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é" in content.lower():
        align = "left"
    elif "–ø–æ —Ü–µ–Ω—Ç—Ä—É" in content.lower():
        align = "center"
    elif "–ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é" in content.lower():
        align = "right"

    if not align:
        return  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫

    if data.get("messages", {}).get(align):
        return

    if any(m and m.message_id == message.message_id for m in data.get("messages", {}).values()):
        return

    body = re.split(r"\n{1,2}", content, maxsplit=1)
    if len(body) < 2:
        return await message.reply(f"‚ö†Ô∏è –ù–µ –º–æ–≥—É –≤—ã–¥–µ–ª–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ—Ç–∫–∏ ({align})")

    lines = [line.strip() for line in body[1].splitlines() if line.strip()]
    expected = data.get("pattern", [])

    def normalize(lines: list[str]) -> list[str]:
        return [
            "".join(c for c in line if not c.isspace()).strip()
            for line in lines
        ]

    if normalize(lines) != normalize(expected):
        diff = "\n".join(
            f"üî¥ –û–∂–∏–¥–∞–ª–æ—Å—å: {e}\nüîµ –ü–æ–ª—É—á–µ–Ω–æ: {l}"
            for e, l in zip(expected, lines)
            if normalize([e])[0] != normalize([l])[0]
        )
        return await message.reply(f"‚ùå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º:\n\n{diff}")

    messages = data.get("messages", {})
    messages[align] = message
    await state.update_data(messages=messages)

    await message.reply(f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {align}")

    updated = await state.get_data()
    messages = updated.get("messages", {})

    if updated.get("done"):
        return

    if all(messages.values()):
        await state.update_data(done=True)
        await message.answer("üì§ –í—Å–µ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã. –ü–µ—Ä–µ—Å—ã–ª–∞—é...")

        for align_key in ("left", "center", "right"):
            try:
                await message.bot.forward_message(
                    chat_id=updated["user_id"],
                    from_chat_id=message.chat.id,
                    message_id=messages[align_key].message_id
                )
            except Exception as e:
                await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ ({align_key}): {e}")

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫—É",
                                      url="https://t.me/addemoji/" + updated["short_name"])]
            ]
        )

        await message.bot.send_message(
            chat_id=updated["user_id"],
            text="‚úÖ –ì–æ—Ç–æ–≤–æ! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫.",
            reply_markup=keyboard
        )

        await state.clear()

@user_router.message(CommandStart())
async def user_start(message: Message, config: Config, command: CommandObject):
    # repo = await get_repo(config)
    #
    # await repo.users.create_user(
    #     user_id=message.from_user.id,
    #     full_name=message.from_user.full_name,
    #     is_premium=True if message.from_user.is_premium else False,
    #     username=message.from_user.username,
    #     referred_by=command.args
    # )

    caption = (
        hbold(f"üí¥ –ö–æ–Ω–Ω–∏—á–∏–≤–∞, {message.from_user.first_name}\n"),
        "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏ emoji pack ‚öîÔ∏è\n",
    )
    photo = "AgACAgEAAxkBAAIFWGgqNaeGa3aWoFc1ybGIemCPKzQpAAI4sjEb6glRRYk6DU1UChwAAQEAAwIAA3kAAzYE"
    await message.answer_photo(
        photo=photo,
        caption="\n".join(caption)
    )

@user_router.message(F.photo | F.video | F.document)
async def media_handler(message: Message, state: FSMContext):
    media = None
    width = None
    height = None
    media_type = None
    file_id = None

    if message.photo:
        media = message.photo[-1]
        width = media.width
        height = media.height
        media_type = "photo"
        file_id = media.file_id

    elif message.video:
        media = message.video
        width = media.width
        height = media.height
        media_type = "video"
        file_id = media.file_id

    elif message.document:
        doc = message.document
        mime = doc.mime_type or ""
        is_image = mime.startswith("image/")
        is_video = mime.startswith("video/")

        if not (is_image or is_video):
            return await message.answer("‚ö†Ô∏è –¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –≤–∏–¥–µ–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –∫–∞–∫ —Ñ–∞–π–ª—ã.")

        if doc.file_size > MAX_FILE_SIZE:
            return await message.answer("‚ö†Ô∏è –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç (15MB).")

        width = doc.thumbnail.width
        height = doc.thumbnail.height
        media_type = "photo" if is_image else "video"
        file_id = doc.file_id

    else:
        return await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –º–µ–¥–∏–∞.")

    if not (width and height and file_id):
        return await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–ª–∏ file_id.")

    await state.update_data(media_type=media_type, file_id=file_id)

    keyboard = generate_size_options_keyboard(width, height)

    text = (
        f"–í—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä –Ω–∞—Ä–µ–∑–∫–∏ –¥–ª—è {'—Ñ–æ—Ç–æ' if media_type == 'photo' else '–≤–∏–¥–µ–æ'}:\n",
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n",
        hitalic("4x4 ‚Äî 4 —ç–º–æ–¥–∑–∏ –≤ —à–∏—Ä–∏–Ω—É –∏ 4 –≤ –≤—ã—Å–æ—Ç—É")
    )

    if len(keyboard.inline_keyboard) == 0:
        text = (
            hbold(f"–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã {'—Ñ–æ—Ç–æ' if media_type == 'photo' else '–≤–∏–¥–µ–æ'}\n"),
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ\n",
        )
    await message.answer("\n".join(text), reply_markup=keyboard)


@user_router.callback_query(SizeOptions.filter())
async def size_options_handler(call: CallbackQuery, callback_data: SizeOptions, state: FSMContext, config: Config):
    data = await state.get_data()
    file_id = data.get("file_id")
    media_type = data.get("media_type")
    user_id = call.from_user.id
    width = callback_data.width
    height = callback_data.height

    await call.message.delete()

    if not file_id or not media_type:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", show_alert=True)
        return

    payload = {
        "file_id": file_id,
        "media_type": media_type,
        "width": width,
        "height": height,
        "user_id": user_id,
    }

    try:
         await client.request(method="post", path="stickers/generate", payload)
    except httpx.HTTPStatusError as e:
        await call.message.answer(f"‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {e.response.text}")
    except Exception:
        tb = traceback.format_exc()
        print(tb)

@user_router.callback_query(F.data == "check_sub")
async def check_sub(call: CallbackQuery, config: Config, state: FSMContext):
    data = await state.get_data()
    # repo = await get_repo(config)
    #
    # await repo.users.create_user(
    #     user_id=call.message.chat.id,
    #     full_name=call.message.chat.full_name,
    #     is_premium=bool(data.get("referred_by")),
    #     username=call.message.chat.username,
    #     referred_by=data.get("referred_by")
    # )

    caption = (
        hbold(f"üí¥ –ö–æ–Ω–Ω–∏—á–∏–≤–∞, {call.message.chat.first_name}\n"),
        "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏ emoji pack ‚öîÔ∏è\n",
    )
    photo = "AgACAgEAAxkBAAIFWGgqNaeGa3aWoFc1ybGIemCPKzQpAAI4sjEb6glRRYk6DU1UChwAAQEAAwIAA3kAAzYE"
    await call.message.answer_photo(
        photo=photo,
        caption="\n".join(caption)
    )

@user_router.message(F.text == "/pay")
async def pay_start(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(PaymentStates.choosing_method)
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_method_keyboard())

@user_router.callback_query(F.data == "pay_usdt_trc20")
async def pay_usdt_trc20(call: CallbackQuery, state: FSMContext):
    await state.set_state(PaymentStates.waiting_screenshot)
    await call.message.edit_text(
        f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω—É–∂–Ω—É—é —Å—É–º–º—É USDT (TRC20) –Ω–∞ –∞–¥—Ä–µ—Å:\n<code>{USDT_TRC20}</code>\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–ª–∞—Ç–µ–∂–∞.", reply_markup=cancel_keyboard()
    )

@user_router.callback_query(F.data == "pay_card")
async def pay_card(call: CallbackQuery, state: FSMContext):
    await state.set_state(PaymentStates.waiting_screenshot)
    await call.message.edit_text(
        f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É –∏–ª–∏ –ø–æ –°–ë–ü:\n"
        f"<b>–ö–∞—Ä—Ç–∞:</b> <code>{CARD}</code>\n"
        f"<b>–°–ë–ü:</b> {SBP}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–ª–∞—Ç–µ–∂–∞.", reply_markup=cancel_keyboard()
    )

@user_router.message(PaymentStates.waiting_screenshot, F.photo)
async def get_screenshot(message: Message, state: FSMContext):
    await state.update_data(screenshot=message.photo[-1].file_id)
    await state.set_state(PaymentStates.waiting_comment)
    await message.answer("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É (–Ω–∏–∫, —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏, email, —á—Ç–æ –æ–ø–ª–∞—Ç–∏–ª –∏ —Ç.–¥.)", reply_markup=cancel_keyboard())

@user_router.message(PaymentStates.waiting_comment)
async def get_comment(message: Message, state: FSMContext, config: Config):
    data = await state.get_data()
    user_id = message.from_user.id
    username = message.from_user.username or user_id

    for admin_id in config.tg_bot.admin_ids:
        try:
            await message.bot.send_message(
                admin_id,
                f"üí∏ –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –æ—Ç @{username}\nUserID: <code>{user_id}</code>\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <i>{message.text}</i>",
                reply_markup=admin_approve_keyboard(user_id)
            )
            await message.bot.send_photo(admin_id, data["screenshot"])
        except Exception as e:
            print(e)
    await state.clear()
    await message.answer("–í–∞—à –ø–ª–∞—Ç—ë–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è!")

@user_router.callback_query(F.data == "cancel_payment")
async def cancel_payment(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

# --- –ê–¥–º–∏–Ω –æ–¥–æ–±—Ä—è–µ—Ç/–æ—Ç–∫–ª–æ–Ω—è–µ—Ç ---
@user_router.callback_query(F.data.startswith("approve_payment_"))
async def admin_approve_payment(call: CallbackQuery):
    user_id = int(call.data.split("_")[-1])
    # –í—ã–∑–æ–≤ API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (product_id, duration)
        payload = {
            "user_id": user_id,
            "product_id": 1,  # ID –ø—Ä–æ–¥—É–∫—Ç–∞, –ø–æ–¥—Å—Ç–∞–≤—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π
            "duration": 30,   # –°—Ä–æ–∫ –≤ –¥–Ω—è—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä 30 –¥–ª—è –º–µ—Å—è—Ü–∞
        }
        resp = await client.post_json("user_subscriptions/add", payload)
        await call.message.edit_text(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
        await call.bot.send_message(
            user_id,
            "üéâ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
    except Exception as e:
        await call.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

@user_router.callback_query(F.data.startswith("decline_payment_"))
async def admin_decline_payment(call: CallbackQuery):
    user_id = int(call.data.split("_")[-1])
    await call.message.edit_text(f"–ü–ª–∞—Ç—ë–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    try:
        await call.bot.send_message(
            user_id,
            "‚ùå –í–∞—à –ø–ª–∞—Ç—ë–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω."
        )
    except Exception as e:
        print(e)